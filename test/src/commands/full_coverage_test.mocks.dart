// Mocks generated by Mockito 5.4.4 from annotations
// in dtt/test/src/commands/full_coverage_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:io' as _i4;

import 'package:dtt/src/util/path_util.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [PathUtil].
///
/// See the documentation for Mockito's code generation for more information.
class MockPathUtil extends _i1.Mock implements _i2.PathUtil {
  @override
  _i3.Future<_i4.Directory?> findDartProjectRoot({_i4.Directory? dir}) =>
      (super.noSuchMethod(
        Invocation.method(
          #findDartProjectRoot,
          [],
          {#dir: dir},
        ),
        returnValue: _i3.Future<_i4.Directory?>.value(),
        returnValueForMissingStub: _i3.Future<_i4.Directory?>.value(),
      ) as _i3.Future<_i4.Directory?>);

  @override
  _i3.Future<String?> getPackageName() => (super.noSuchMethod(
        Invocation.method(
          #getPackageName,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  _i3.Future<List<String>?> findSourcePaths({String? sourceDirPath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #findSourcePaths,
          [],
          {#sourceDirPath: sourceDirPath},
        ),
        returnValue: _i3.Future<List<String>?>.value(),
        returnValueForMissingStub: _i3.Future<List<String>?>.value(),
      ) as _i3.Future<List<String>?>);

  @override
  String? readCoverageTestFile(
          {String? assetPath = r'asset/dart/coverage_test.dart'}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readCoverageTestFile,
          [],
          {#assetPath: assetPath},
        ),
        returnValueForMissingStub: null,
      ) as String?);
}
